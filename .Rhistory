findvalue <- function(row) {
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
if (test == 0) {
return(0)
} else {
ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)]
}
}
fill.file$Steps[row] <- findvalue(row)
rm(list = ls())
---
title: "Reproducible Research: Peer Assessment 1"
author: "Yuan Wei"
date: "August 19, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Introduction
This is a submission for Coursera Data Science Specilization, Reproducible Research - Peer Graded Assignment: Course Project 1. The Github repository for this project can be found [here](https://github.com/rdpeng/RepData_PeerAssessment1).
Dplyr and ggplot2 pakages are required for this analysis.
```{r packages, message=FALSE, warning=FALSE}
require(ggplot2)
require(dplyr)
```
## Loading & Processing Data
Read data from raw data in  working directory:
```{r}
file <- read.csv(file = "activity.csv", header = TRUE, col.names = c("Steps", "Date", "Interval"))
clean.file <- file[complete.cases(file),]
```
Calculate the total number of steps taken per day and plot a histogram
```{r, fig.width=10, fig.height=4}
steps.per.day.array <- tapply(file$Steps, file$Date, sum, na.rm=TRUE)
steps.per.day <- data.frame(names(steps.per.day.array), steps.per.day.array, row.names = NULL)
names(steps.per.day) <- c("Date", "Steps")
g <- ggplot(steps.per.day, aes(Steps))
g + geom_histogram(color = "blue", fill = "white", binwidth = 1000) +
ggtitle("Steps per day") +
xlab("Steps") +
ylab("Frequency")
```
## What is mean total number of steps taken per day?
```{r}
summary(steps.per.day$Steps)
```
## What is the average daily activity pattern?
```{r, fig.width=10, fig.height=4}
ave.steps <- clean.file %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
g2 <- ggplot(ave.steps, aes(Interval, avg))
g2 +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
```
Maximum number of steps
```{r}
max.step <- filter(ave.steps, avg==max(ave.steps$avg))
max.step
```
## Inputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
no.na <- nrow(file[!complete.cases(file),])
no.na
```
Filling in all of the missing values in the dataset
```{r}
ave.steps.per.day <- clean.file %>%
group_by(Date) %>%
summarise(avg = mean(Steps))
ave.steps.per.day <- rbind(ave.steps.per.day, c("2012-10-01", 0))
findvalue <- function(row) {
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
if (test == 0) {
return(0)
} else {
ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)]
}
}
fill.file <- file
for (row in nrow(fill.file)) {
if (is.na(fill.file$Steps[row])) {
fill.file$Steps[row] <- findvalue(row)
}
}
is.na(fill.file)
head(fill.file)
is.na(fill.file$Steps[row])
!is.na(fill.file$Steps[row])
fill.file <- file
for (row in nrow(fill.file)) {
if (!is.na(fill.file$Steps[row])) {
fill.file$Steps[row] <- findvalue(row)
}
}
head(fill.file)
findvalue(10)
findvalue(150)
fill.file$Steps[row]
fill.file$Steps[row] <- 0
tail(fill.file)
fill.file <- file
for (row in nrow(fill.file)) {
if (!is.na(fill.file$Steps[row])) {
find.value(row)
fill.file$Steps[row] <- findvalue(row)
}
}
fill.file <- file
for (row in nrow(fill.file)) {
if (!is.na(fill.file$Steps[row])) {
print(find.value(row))
fill.file$Steps[row] <- findvalue(row)
}
}
rm(row)
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (!is.na(fill.file$Steps[row])) {
print(find.value(row))
fill.file$Steps[row] <- findvalue(row)
}
}
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (!is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
head(fill.file)
findvalue(1)
for (row in 1:10) {
if (!is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
!is.na(fill.file$Steps[1])
!is.na(fill.file$Steps[2])
head(fill.file)
is.na(fill.file$Steps[1])
fill.file <- file
for (row in 1:10) {
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
head(fill.file)
fill.file <- file
for (row in 1:10) {
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)]
ave.steps.per.day$avg[grep(as.character(fill.file$Date[154]), ave.steps.per.day$Date)]
ave.steps.per.day$avg[grep(as.character(fill.file$Date[199]), ave.steps.per.day$Date)]
ave.steps.per.day$avg[grep(as.character(fill.file$Date[200]), ave.steps.per.day$Date)]
ave.steps.per.day
as.character(fill.file$Date[200])
as.character(fill.file$Date[2000])
ave.steps.per.day$avg[grep(as.character(fill.file$Date[2000]), ave.steps.per.day$Date)]
rm(list = ls())
---
title: "Reproducible Research: Peer Assessment 1"
author: "Yuan Wei"
date: "August 19, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Introduction
This is a submission for Coursera Data Science Specilization, Reproducible Research - Peer Graded Assignment: Course Project 1. The Github repository for this project can be found [here](https://github.com/rdpeng/RepData_PeerAssessment1).
Dplyr and ggplot2 pakages are required for this analysis.
```{r packages, message=FALSE, warning=FALSE}
require(ggplot2)
require(dplyr)
```
## Loading & Processing Data
Read data from raw data in  working directory:
```{r}
file <- read.csv(file = "activity.csv", header = TRUE, col.names = c("Steps", "Date", "Interval"))
clean.file <- file[complete.cases(file),]
```
Calculate the total number of steps taken per day and plot a histogram
```{r, fig.width=10, fig.height=4}
steps.per.day.array <- tapply(file$Steps, file$Date, sum, na.rm=TRUE)
steps.per.day <- data.frame(names(steps.per.day.array), steps.per.day.array, row.names = NULL)
names(steps.per.day) <- c("Date", "Steps")
g <- ggplot(steps.per.day, aes(Steps))
g + geom_histogram(color = "blue", fill = "white", binwidth = 1000) +
ggtitle("Steps per day") +
xlab("Steps") +
ylab("Frequency")
```
## What is mean total number of steps taken per day?
```{r}
summary(steps.per.day$Steps)
```
## What is the average daily activity pattern?
```{r, fig.width=10, fig.height=4}
ave.steps <- clean.file %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
g2 <- ggplot(ave.steps, aes(Interval, avg))
g2 +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
```
Maximum number of steps
```{r}
max.step <- filter(ave.steps, avg==max(ave.steps$avg))
max.step
```
## Inputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
no.na <- nrow(file[!complete.cases(file),])
no.na
```
Filling in all of the missing values in the dataset
```{r}
ave.steps.per.day <- clean.file %>%
group_by(Date) %>%
summarise(avg = mean(Steps))
ave.steps.per.day <- rbind(ave.steps.per.day, c("2012-10-01", 0))
findvalue <- function(row) {
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
if (test == 0) {
return(0)
} else {
return(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
}
}
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
```
## Are there differences in activity patterns between weekdays and weekends?
length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[2000]), ave.steps.per.day$Date)])
length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[2000]), ave.steps.per.day$Date)]) == 0
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
if (test == 0) {
return(0)
} else {
return(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
}
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)]
head(fill.file)
tail(fill.file)
ave.steps.per.day$avg[grep("2012-11-30", ave.steps.per.day$Date)]
new.steps.per.day.array <- tapply(fil.file$Steps, f.llfile$Date, sum, na.rm=TRUE)
new.steps.per.day <- data.frame(names(new.steps.per.day.array), new.steps.per.day.array, row.names = NULL)
names(new.steps.per.day) <- c("Date", "Steps")
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
new.steps.per.day <- data.frame(names(new.steps.per.day.array), new.steps.per.day.array, row.names = NULL)
names(new.steps.per.day) <- c("Date", "Steps")
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
fill.file$Steps
for (row in 1:nrow(fill.file)) {
print(row)
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
findvalue(2000)
fill.file$Steps[2000]
fill.file$Steps[2000] <- findvalue(2000)
fill.file$Steps[2000]
rm(list = )
rm(list = ls())
is.na(fill.file$Steps[2000])
---
title: "Reproducible Research: Peer Assessment 1"
author: "Yuan Wei"
date: "August 19, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Introduction
This is a submission for Coursera Data Science Specilization, Reproducible Research - Peer Graded Assignment: Course Project 1. The Github repository for this project can be found [here](https://github.com/rdpeng/RepData_PeerAssessment1).
Dplyr and ggplot2 pakages are required for this analysis.
```{r packages, message=FALSE, warning=FALSE}
require(ggplot2)
require(dplyr)
```
## Loading & Processing Data
Read data from raw data in  working directory:
```{r}
file <- read.csv(file = "activity.csv", header = TRUE, col.names = c("Steps", "Date", "Interval"))
clean.file <- file[complete.cases(file),]
```
Calculate the total number of steps taken per day and plot a histogram
```{r, fig.width=10, fig.height=4}
steps.per.day.array <- tapply(file$Steps, file$Date, sum, na.rm=TRUE)
steps.per.day <- data.frame(names(steps.per.day.array), steps.per.day.array, row.names = NULL)
names(steps.per.day) <- c("Date", "Steps")
g <- ggplot(steps.per.day, aes(Steps))
g + geom_histogram(color = "blue", fill = "white", binwidth = 1000) +
ggtitle("Steps per day") +
xlab("Steps") +
ylab("Frequency")
```
## What is mean total number of steps taken per day?
```{r}
summary(steps.per.day$Steps)
```
## What is the average daily activity pattern?
```{r, fig.width=10, fig.height=4}
ave.steps <- clean.file %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
g2 <- ggplot(ave.steps, aes(Interval, avg))
g2 +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
```
Maximum number of steps
```{r}
max.step <- filter(ave.steps, avg==max(ave.steps$avg))
max.step
```
## Inputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
no.na <- nrow(file[!complete.cases(file),])
no.na
```
Filling in all of the missing values in the dataset using means of day.
```{r}
ave.steps.per.day <- clean.file %>%
group_by(Date) %>%
summarise(avg = mean(Steps))
ave.steps.per.day <- rbind(ave.steps.per.day, c("2012-10-01", 0))
findvalue <- function(row) {
test <- length(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
if (test == 0) {
return(0)
} else {
return(ave.steps.per.day$avg[grep(as.character(fill.file$Date[row]), ave.steps.per.day$Date)])
}
}
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (is.na(fill.file$Steps[row])) {
print(findvalue(row))
fill.file$Steps[row] <- findvalue(row)
}
}
```
Check if new  dataset that is equal to the original dataset but with the missing data filled in.
```{r}
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
new.steps.per.day <- data.frame(names(new.steps.per.day.array), new.steps.per.day.array, row.names = NULL)
names(new.steps.per.day) <- c("Date", "Steps")
```
## Are there differences in activity patterns between weekdays and weekends?
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
class(fill.file)
?tapply
class(fill.file$Date)
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
class(fill.file$Steps)
fill.file <- file
for (row in 1:nrow(fill.file)) {
if (is.na(fill.file$Steps[row])) {
fill.file$Steps[row] <- as.numeric(findvalue(row))
}
}
class(fill.file$Steps)
new.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
new.steps.per.day <- data.frame(names(new.steps.per.day.array), new.steps.per.day.array, row.names = NULL)
names(new.steps.per.day) <- c("Date", "Steps")
summary(new.steps.per.day$Steps)
head(fill.file)
```{r, fig.width=10, fig.height=4}
fill.steps.per.day.array <- tapply(fill.file$Steps, fill.file$Date, sum, na.rm=TRUE)
fill.steps.per.day <- data.frame(names(fill.steps.per.day.array), fill.steps.per.day.array, row.names = NULL)
names(fill.steps.per.day) <- c("Date", "Steps")
g3 <- ggplot(fill.steps.per.day, aes(Steps))
g3 + geom_histogram(color = "blue", fill = "white", binwidth = 1000) +
ggtitle("Steps per day") +
xlab("Steps") +
ylab("Frequency")
```
g3 + geom_histogram(color = "orange", fill = "white", binwidth = 1000) +
ggtitle("Steps per day") +
xlab("Steps") +
ylab("Frequency")
?weekdays
class(fill.file$Date)
as.Date(fill.file$Date)
fill.file$Date <- as.Date(fill.file$Date)
str(fill.file)
fill.file$Date <- as.Date(fill.file$Date)
fill.file$Day <- weekdays(fill.file$Date)
```
head(fill.file)
?filter
str(fill.file$Day)
str(fill.file)
str(as.factor(fill.file$Day))
weekday <- filter(fill.file, Day = "Monday", Day = "Tuesday", Day = "Wednesday",Day = "Thursday",Day = "Friday")
weekend <- filter(fill.file, Day = "Saturday", Day = "Sunday")
weekday <- filter(fill.file, Day = "Monday")
head(fill.file)
weekday <- filter(fill.file, Day == "Monday", Day == "Tuesday", Day == "Wednesday",Day == "Thursday",Day == "Friday")
weekday <- filter(fill.file, Day == "Monday" | Day == "Tuesday" | Day == "Wednesday" | Day == "Thursday" | Day == "Friday")
weekend <- filter(fill.file, Day = "Saturday" | Day = "Sunday")
weekend <- filter(fill.file, Day = "Saturday" | Day = "Sunday")
weekday <- filter(fill.file, Day == "Monday" | Day == "Tuesday" | Day == "Wednesday" | Day == "Thursday" | Day == "Friday")
weekend <- filter(fill.file, Day == "Saturday" | Day == "Sunday")
weekday.ave.steps <- weekday %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
weekend.ave.steps <- weekend %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
weekday.ave.steps <- weekday %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
weekend.ave.steps <- weekend %>%
group_by(Interval) %>%
summarise(avg = mean(Steps))
g4 <- ggplot(weekday.ave.steps, aes(Interval, avg))
g4 + geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
head(weekday)
head(weekday.ave.steps)
weekday$Day <- "Weekday"
weekday.ave.steps <- weekday %>%
group_by(Interval) %>%
summarise(avg = mean(Steps)) %>%
cbind("Weekday")
head(weekday.ave.steps)
weekend.ave.steps <- weekend %>%
group_by(Interval) %>%
summarise(avg = mean(Steps)) %>%
cbind("Weekend")
head(weekend.ave.steps)
week.ave.steps <- rbind(weekday.ave.steps, weekend.ave.steps)
weekday.ave.steps <- weekday %>%
group_by(Interval) %>%
summarise(avg = mean(Steps)) %>%
cbind("Weekday")
names(weekday.ave.steps) <- c("Interval", "avg", "daysofweek")
weekend.ave.steps <- weekend %>%
group_by(Interval) %>%
summarise(avg = mean(Steps)) %>%
cbind("Weekend")
names(weekend.ave.steps) <- c("Interval", "avg", "daysofweek")
week.ave.steps <- rbind(weekday.ave.steps, weekend.ave.steps)
head(week.ave.steps)
g4 <- ggplot(weekday.ave.steps, aes(Interval, avg)) +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
g4 + facet_grid(daysofweek~.)
weekend.ave.steps <- weekend %>%
group_by(Interval) %>%
summarise(avg = mean(Steps)) %>%
cbind("Weekend")
names(weekend.ave.steps) <- c("Interval", "avg", "daysofweek")
head(weekend.ave.steps)
week.ave.steps <- rbind(weekday.ave.steps, weekend.ave.steps)
str(week.ave.steps)
g4 <- ggplot(weekday.ave.steps, aes(Interval, avg)) +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
g4 + facet_grid(daysofweek~.)
tail(week.ave.steps)
g4 + facet_grid(daysofweek ~ .)
ggplotly()
class(week.ave.steps$daysofweek)
g4 <- ggplot(weekday.ave.steps, aes(Interval, avg)) +
geom_line()
g4 + facet_grid(daysofweek ~ .)
cbind("Weekday")
g4 <- ggplot(week.ave.steps, aes(Interval, avg)) +
geom_line() +
xlab("Interval") +
ylab("Average number of steps per day")
g4 + facet_grid(daysofweek ~ .)
g4 + facet_grid(.~daysofweek)
g4 + facet_grid(daysofweek ~ .)
